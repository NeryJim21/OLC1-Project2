/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,18],$V2=[1,19],$V3=[1,11],$V4=[1,13],$V5=[1,25],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[2,5,22,23,24,36,47,59,60,61,62,63],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,41],$Vi=[24,27,41,49],$Vj=[1,70],$Vk=[1,56],$Vl=[1,64],$Vm=[1,65],$Vn=[1,66],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[1,48],$Vs=[1,49],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[8,27],$VB=[1,74],$VC=[1,77],$VD=[1,94],$VE=[1,95],$VF=[1,86],$VG=[1,87],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[1,83],$VL=[1,84],$VM=[1,85],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[1,93],$VT=[1,96],$VU=[8,14,27,32,37,38,42,48,49,64,65,67,68,69,70,71,72,73,74,75,76,81,82],$VV=[8,14,27,32,42,64,65,81,82],$VW=[1,156],$VX=[1,161],$VY=[14,27,32],$VZ=[8,14,27,32,42,48,49,64,65,67,68,69,70,81,82],$V_=[8,14,27,32,42,48,49,64,65,67,68,69,70,71,72,81,82],$V$=[8,14,27,32,42,48,49,64,65,67,68,69,70,71,72,73,74,75,81,82],$V01=[1,193],$V11=[1,202],$V21=[1,203],$V31=[1,204],$V41=[1,205],$V51=[1,206],$V61=[1,207],$V71=[1,197],$V81=[1,198],$V91=[1,199],$Va1=[27,32],$Vb1=[1,211],$Vc1=[14,24,34,36,47,59,60,61,62,63,93,96,100,101,104,105,106,109,110,111],$Vd1=[1,304],$Ve1=[1,315],$Vf1=[14,100,101];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"globalBody":4,"EOF":5,"global":6,"assigment":7,";":8,"statment":9,"vector":10,"list":11,"main":12,"method":13,"}":14,"localBody":15,"local":16,"callmethod":17,"conditionals":18,"control":19,"cyclicals":20,"print":21,"PR_MAIN":22,"PR_VOID":23,"ID":24,"(":25,"parameters":26,")":27,"{":28,"type":29,"attributes":30,"callfunction":31,",":32,"expression":33,"PR_PRINT":34,"=":35,"tipo":36,"++":37,"--":38,"vectorStatment":39,"assigVector":40,"[":41,"]":42,"PR_NEW":43,"toChar":44,"listStarment":45,"assigList":46,"PR_LIST":47,"<":48,">":49,".":50,"PR_ADD":51,"valuetype":52,"DECIMAL":53,"NUMBER":54,"FALSE":55,"TRUE":56,"CHAR":57,"STR":58,"PR_INT":59,"PR_DOUBLE":60,"PR_BOOLEAN":61,"PR_CHAR":62,"PR_STRING":63,"&&":64,"||":65,"!":66,"==":67,"!=":68,"<=":69,">=":70,"+":71,"-":72,"*":73,"/":74,"%":75,"^":76,"ternary":77,"casting":78,"function":79,"structures":80,"?":81,":":82,"PR_TRUNCATE":83,"PR_LENGTH":84,"PR_TYPEOF":85,"PR_TOLOWER":86,"PR_TOUPPER":87,"PR_ROUND":88,"PR_TOSTRING":89,"PR_TOCHARARRAY":90,"ifcondition":91,"switchcondition":92,"PR_IF":93,"elsecondition":94,"PR_ELSE":95,"PR_SWITCH":96,"casecondition":97,"defaultcondition":98,"default":99,"PR_CASE":100,"PR_DEFAULT":101,"whilecycle":102,"forcycle":103,"PR_DO":104,"PR_WHILE":105,"PR_FOR":106,"assigmentFor":107,"statmentFor":108,"PR_RETURN":109,"PR_CONTINUE":110,"PR_BREAK":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",14:"}",22:"PR_MAIN",23:"PR_VOID",24:"ID",25:"(",27:")",28:"{",32:",",34:"PR_PRINT",35:"=",36:"tipo",37:"++",38:"--",41:"[",42:"]",43:"PR_NEW",47:"PR_LIST",48:"<",49:">",50:".",51:"PR_ADD",53:"DECIMAL",54:"NUMBER",55:"FALSE",56:"TRUE",57:"CHAR",58:"STR",59:"PR_INT",60:"PR_DOUBLE",61:"PR_BOOLEAN",62:"PR_CHAR",63:"PR_STRING",64:"&&",65:"||",66:"!",67:"==",68:"!=",69:"<=",70:">=",71:"+",72:"-",73:"*",74:"/",75:"%",76:"^",81:"?",82:":",83:"PR_TRUNCATE",84:"PR_LENGTH",85:"PR_TYPEOF",86:"PR_TOLOWER",87:"PR_TOUPPER",88:"PR_ROUND",89:"PR_TOSTRING",90:"PR_TOCHARARRAY",93:"PR_IF",95:"PR_ELSE",96:"PR_SWITCH",99:"default",100:"PR_CASE",101:"PR_DEFAULT",104:"PR_DO",105:"PR_WHILE",106:"PR_FOR",109:"PR_RETURN",110:"PR_CONTINUE",111:"PR_BREAK"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[15,2],[15,1],[16,2],[16,2],[16,1],[16,2],[16,2],[16,2],[16,1],[16,2],[16,2],[12,2],[13,8],[13,8],[13,7],[13,7],[17,4],[17,3],[31,4],[31,3],[26,4],[26,2],[30,3],[30,1],[21,4],[21,3],[9,4],[9,2],[7,3],[7,2],[7,2],[10,1],[10,1],[39,10],[39,8],[39,6],[40,6],[11,1],[11,1],[45,11],[45,7],[46,6],[46,8],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[29,1],[29,1],[29,1],[29,1],[29,1],[33,3],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3],[78,4],[80,4],[80,6],[77,5],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[44,4],[18,1],[18,1],[91,8],[91,7],[91,7],[91,6],[94,2],[94,4],[94,3],[92,8],[92,7],[92,7],[92,6],[97,5],[97,4],[97,4],[97,3],[98,3],[98,2],[20,1],[20,1],[102,9],[102,7],[102,8],[102,6],[103,11],[103,11],[108,4],[107,3],[19,2],[19,1],[19,1],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 12:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 13:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 14: case 15: case 17: case 18: case 19: case 21: case 22:
 this.$ = $$[$0-1]; 
break;
case 9: case 16: case 20:
 this.$ = $$[$0]; 
break;
case 10:
 output.setOutput(`-->Sint치ctico, se esperaba: ${yytext} (${this._$.first_line}:${this._$.first_column}).`); 
                                        errors.add(new Error("Sint치ctico", `Se esperaba: ${yytext}`, this._$.first_line, this._$.first_column)); 
break;
case 11:
 output.setOutput(`-->Sint치ctico, se esperaba, ${yytext} (${this._$.first_line}:${this._$.first_column}).`); 
                                        errors.add(new Error("Sint치ctico", `Se esperaba: ${yytext}`, this._$.first_line, this._$.first_column)); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,22:$V1,23:$V2,24:$V3,29:12,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{1:[3]},{2:$V0,5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,22:$V1,23:$V2,24:$V3,29:12,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},o($Vb,[2,3]),{8:[1,28]},{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},o($Vb,[2,9]),{8:[1,33],14:[1,34]},{35:$Vc,37:$Vd,38:$Ve,41:$Vf,50:$Vg},{24:[1,40],41:$Vh},{24:[1,42]},{8:[2,43]},{8:[2,44]},{8:[2,49]},{8:[2,50]},{17:43,24:[1,44]},{24:[1,45]},o($Vi,[2,62]),o($Vi,[2,63]),o($Vi,[2,64]),o($Vi,[2,65]),o($Vi,[2,66]),{48:[1,46]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,10]),o($Vb,[2,11]),{24:$Vj,25:$Vk,31:55,33:47,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},o($VA,[2,41]),o($VA,[2,42]),{24:$Vj,25:$Vk,31:55,33:71,41:[1,72],52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{51:[1,73]},{25:[1,75],35:$VB},{42:[1,76]},{8:[2,39]},{8:[2,23]},{25:$VC},{25:[1,78]},{29:79,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},o($VA,[2,40],{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT}),{24:$Vj,25:$Vk,31:55,33:97,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:98,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},o($VU,[2,85]),o($VU,[2,86]),o($VU,[2,87]),o($VU,[2,88]),o($VU,[2,89]),o($VU,[2,90]),{24:$Vj,25:$Vk,29:100,31:55,33:99,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{25:[1,101]},{25:[1,102]},{25:[1,103]},{25:[1,104]},{25:[1,105]},{25:[1,106]},{25:[1,107]},o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61],{25:[1,109],41:[1,108]}),{37:$VD,38:$VE,42:[1,110],48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{24:$Vj,25:$Vk,31:55,33:111,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{25:[1,112]},{24:$Vj,25:$Vk,31:55,33:113,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{26:114,27:[1,115],29:116,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{24:[1,117]},{24:$Vj,25:$Vk,27:[1,119],30:118,31:55,33:120,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{26:121,27:[1,122],29:116,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{49:[1,123]},{24:$Vj,25:$Vk,31:55,33:124,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:125,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:126,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:127,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:128,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:129,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:130,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:131,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:132,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:133,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:134,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:135,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:136,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:137,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},o($VU,[2,83]),o($VU,[2,84]),{24:$Vj,25:$Vk,31:55,33:138,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},o($VV,[2,69],{37:$VD,38:$VE,48:$VF,49:$VG,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($VU,[2,82]),{27:[1,139],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,140]},{24:$Vj,25:$Vk,31:55,33:141,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:142,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:143,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:144,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:145,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:146,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:147,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:148,41:[1,149],52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,27:[1,151],30:150,31:55,33:120,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{35:[1,152]},{37:$VD,38:$VE,42:[1,153],48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{24:$Vj,25:$Vk,31:55,33:154,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{8:[2,38],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,155],32:$VW},{28:[1,157]},{24:[1,158]},{35:[1,159]},{27:[1,160],32:$VX},{8:[2,29]},o($VY,[2,35],{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT}),{27:[1,162],32:$VW},{28:[1,163]},{24:[1,164]},o($VV,[2,67],{37:$VD,38:$VE,48:$VF,49:$VG,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o([8,14,27,32,42,65,81,82],[2,68],{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($VZ,[2,70],{37:$VD,38:$VE,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($VZ,[2,71],{37:$VD,38:$VE,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($VZ,[2,72],{37:$VD,38:$VE,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($VZ,[2,73],{37:$VD,38:$VE,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($VZ,[2,74],{37:$VD,38:$VE,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($VZ,[2,75],{37:$VD,38:$VE,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),o($V_,[2,76],{37:$VD,38:$VE,73:$VP,74:$VQ,75:$VR,76:$VS}),o($V_,[2,77],{37:$VD,38:$VE,73:$VP,74:$VQ,75:$VR,76:$VS}),o($V$,[2,78],{37:$VD,38:$VE,76:$VS}),o($V$,[2,79],{37:$VD,38:$VE,76:$VS}),o($V$,[2,80],{37:$VD,38:$VE,76:$VS}),o([8,14,27,32,42,48,49,64,65,67,68,69,70,71,72,73,74,75,76,81,82],[2,81],{37:$VD,38:$VE}),{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT,82:[1,165]},o($VU,[2,91]),{24:$Vj,25:$Vk,31:55,33:166,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{27:[1,167],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,168],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,169],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,170],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,171],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,172],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,173],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{37:$VD,38:$VE,42:[1,174],48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{24:$Vj,25:$Vk,31:55,33:175,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{27:[1,176],32:$VX},o($VU,[2,31]),{24:$Vj,25:$Vk,31:55,33:177,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{42:[1,178]},{27:[1,179],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{28:[1,180]},{29:181,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{7:185,9:187,10:189,11:192,15:182,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Va1,[2,33]),{28:[1,209],43:[1,208],44:210,90:$Vb1},{8:[2,28]},{24:$Vj,25:$Vk,31:55,33:212,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{28:[1,213]},{7:185,9:187,10:189,11:192,15:214,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{35:[1,215]},{24:$Vj,25:$Vk,31:55,33:216,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},o($VU,[2,92]),o($VU,[2,96]),o($VU,[2,97]),o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,93]),{37:$VD,38:$VE,42:[1,217],48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},o($VU,[2,30]),{8:[2,48],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{35:[1,218]},{8:[2,53]},{7:185,9:187,10:189,11:192,15:219,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{24:[1,220]},{7:185,9:187,10:189,11:192,14:[1,221],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vc1,[2,13]),{8:[1,223]},{8:[1,224]},o($Vc1,[2,16]),{8:[1,225]},{8:[1,226]},{8:[1,227]},o($Vc1,[2,20]),{8:[1,228]},{8:[1,229]},{25:$VC,35:$Vc,37:$Vd,38:$Ve,41:$Vf,50:$Vg},o($Vc1,[2,104]),o($Vc1,[2,105]),{24:[1,230],41:$Vh},{8:[2,134],24:$Vj,25:$Vk,31:55,33:231,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{8:[2,135]},{8:[2,136]},o($Vc1,[2,123]),o($Vc1,[2,124]),{25:[1,232]},{25:[1,233]},{25:[1,234]},{28:[1,235]},{25:[1,236]},{25:[1,237]},{29:238,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{24:$Vj,25:$Vk,30:239,31:55,33:120,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{8:[2,47]},{25:[1,240]},o($VY,[2,34],{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT}),{7:185,9:187,10:189,11:192,15:241,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{7:185,9:187,10:189,11:192,14:[1,242],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{43:[1,243],44:244,90:$Vb1},o([8,14,27,32,42,81,82],[2,95],{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS}),{42:[1,245]},{24:$Vj,25:$Vk,31:55,33:246,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{7:185,9:187,10:189,11:192,14:[1,247],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Va1,[2,32]),o($Vb,[2,27]),o($Vc1,[2,12]),o($Vc1,[2,14]),o($Vc1,[2,15]),o($Vc1,[2,17]),o($Vc1,[2,18]),o($Vc1,[2,19]),o($Vc1,[2,21]),o($Vc1,[2,22]),{35:$VB},{8:[2,133],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{24:$Vj,25:$Vk,27:[1,249],31:55,33:248,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:250,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:251,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{7:185,9:187,10:189,11:192,14:[1,253],15:252,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{24:$Vj,25:$Vk,31:55,33:254,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:[1,257],29:258,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,107:255,108:256},{41:[1,259]},{14:[1,260],32:$VX},{24:$Vj,25:$Vk,31:55,33:261,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{7:185,9:187,10:189,11:192,14:[1,262],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vb,[2,26]),{47:[1,263]},{8:[2,52]},o($VU,[2,94]),{8:[2,54],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},o($Vb,[2,25]),{27:[1,264],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{8:[2,37]},{27:[1,265],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{27:[1,266],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{7:185,9:187,10:189,11:192,14:[1,267],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{105:[1,268]},{27:[1,269],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{8:[1,270]},{8:[1,271]},{35:[1,272]},{24:[1,273]},{24:$Vj,25:$Vk,31:55,33:274,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{8:[2,46]},{27:[1,275],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},o($Vb,[2,24]),{48:[1,276]},{8:[2,36]},{28:[1,277]},{28:[1,278]},{105:[1,279]},{25:[1,280]},{28:[1,281]},{24:$Vj,25:$Vk,31:55,33:282,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:283,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:284,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{35:[1,285]},{37:$VD,38:$VE,42:[1,286],48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{8:[2,103]},{29:287,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{7:185,9:187,10:189,11:192,14:[1,289],15:288,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{14:[1,292],97:290,99:[1,291],100:[1,293]},{25:[1,294]},{24:$Vj,25:$Vk,31:55,33:295,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{7:185,9:187,10:189,11:192,14:[1,297],15:296,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{8:[1,298],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{8:[1,299],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{8:[2,132],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{24:$Vj,25:$Vk,31:55,33:300,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{8:[2,45]},{49:[1,301]},{7:185,9:187,10:189,11:192,14:[1,302],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vc1,[2,109],{94:303,95:$Vd1}),{14:[1,306],98:305,100:[1,307],101:[1,308]},{14:[1,309]},o($Vc1,[2,116]),{24:$Vj,25:$Vk,31:55,33:310,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{24:$Vj,25:$Vk,31:55,33:311,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{27:[1,312],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{7:185,9:187,10:189,11:192,14:[1,313],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vc1,[2,128]),{7:314,24:$Ve1},{7:316,24:$Ve1},{8:[2,131],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{8:[2,51]},o($Vc1,[2,107],{94:317,95:$Vd1}),o($Vc1,[2,108]),{28:[1,319],91:318,93:$V21},{14:[1,320]},o($Vc1,[2,114]),{24:$Vj,25:$Vk,31:55,33:321,52:53,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,66:$Vr,72:$Vs,77:50,78:51,79:52,80:54,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz},{82:[1,322]},o($Vc1,[2,115]),{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT,82:[1,323]},{27:[1,324],37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT},{8:[1,325]},o($Vc1,[2,126]),{27:[1,326]},{35:$Vc,37:$Vd,38:$Ve},{27:[1,327]},o($Vc1,[2,106]),o($Vc1,[2,110]),{7:185,9:187,10:189,11:192,14:[1,329],15:328,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vc1,[2,113]),{37:$VD,38:$VE,48:$VF,49:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,81:$VT,82:[1,330]},{7:185,9:187,10:189,11:192,14:[2,122],15:331,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vf1,[2,120],{39:14,40:15,45:16,46:17,16:183,17:184,7:185,18:186,9:187,19:188,10:189,20:190,21:191,11:192,91:194,92:195,29:196,102:200,103:201,15:332,24:$V01,34:$V11,36:$V4,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,93:$V21,96:$V31,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91}),{8:[1,333]},o($Vc1,[2,127]),{28:[1,334]},{28:[1,335]},{7:185,9:187,10:189,11:192,14:[1,336],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vc1,[2,112]),o($Vf1,[2,118],{39:14,40:15,45:16,46:17,16:183,17:184,7:185,18:186,9:187,19:188,10:189,20:190,21:191,11:192,91:194,92:195,29:196,102:200,103:201,15:337,24:$V01,34:$V11,36:$V4,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,93:$V21,96:$V31,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91}),{7:185,9:187,10:189,11:192,14:[2,121],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vf1,[2,119],{39:14,40:15,45:16,46:17,17:184,7:185,18:186,9:187,19:188,10:189,20:190,21:191,11:192,91:194,92:195,29:196,102:200,103:201,16:222,24:$V01,34:$V11,36:$V4,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,93:$V21,96:$V31,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91}),o($Vc1,[2,125]),{7:185,9:187,10:189,11:192,15:338,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{7:185,9:187,10:189,11:192,15:339,16:183,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vc1,[2,111]),o($Vf1,[2,117],{39:14,40:15,45:16,46:17,17:184,7:185,18:186,9:187,19:188,10:189,20:190,21:191,11:192,91:194,92:195,29:196,102:200,103:201,16:222,24:$V01,34:$V11,36:$V4,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,93:$V21,96:$V31,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91}),{7:185,9:187,10:189,11:192,14:[1,340],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},{7:185,9:187,10:189,11:192,14:[1,341],16:222,17:184,18:186,19:188,20:190,21:191,24:$V01,29:196,34:$V11,36:$V4,39:14,40:15,45:16,46:17,47:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,91:194,92:195,93:$V21,96:$V31,102:200,103:201,104:$V41,105:$V51,106:$V61,109:$V71,110:$V81,111:$V91},o($Vc1,[2,129]),o($Vc1,[2,130])],
defaultActions: {14:[2,43],15:[2,44],16:[2,49],17:[2,50],26:[2,1],42:[2,39],43:[2,23],119:[2,29],160:[2,28],179:[2,53],198:[2,135],199:[2,136],210:[2,47],244:[2,52],249:[2,37],260:[2,46],264:[2,36],275:[2,103],286:[2,45],301:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Errores
    const { errors, output } = require('../reports/report');
    const { Error } = require('../reports/report')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 59;
break;
case 6:return 60;
break;
case 7:return 61;
break;
case 8:return 62;
break;
case 9:return 63;
break;
case 10:return 43;
break;
case 11:return 47;
break;
case 12:return 51;
break;
case 13:return 93;
break;
case 14:return 95;
break;
case 15:return 96;
break;
case 16:return 100;
break;
case 17:return 101;
break;
case 18:return 111;
break;
case 19:return 105;
break;
case 20:return 106;
break;
case 21:return 104;
break;
case 22:return 110;
break;
case 23:return 109;
break;
case 24:return 23;
break;
case 25:return 34;
break;
case 26:return 86;
break;
case 27:return 87;
break;
case 28:return 84;
break;
case 29:return 83;
break;
case 30:return 88;
break;
case 31:return 85;
break;
case 32:return 89;
break;
case 33:return 90;
break;
case 34:return 22;
break;
case 35:return 35;
break;
case 36:return 67;
break;
case 37:return 68;
break;
case 38:return 48;
break;
case 39:return 49;
break;
case 40:return 69;
break;
case 41:return 70;
break;
case 42:return 81;
break;
case 43:return 65;
break;
case 44:return 64;
break;
case 45:return 66;
break;
case 46:return 37;
break;
case 47:return 38;
break;
case 48:return 71;
break;
case 49:return 72;
break;
case 50:return 73;
break;
case 51:return 74;
break;
case 52:return 76;
break;
case 53:return 75;
break;
case 54:return 25;
break;
case 55:return 27;
break;
case 56:return 28;
break;
case 57:return 14;
break;
case 58:return 41;
break;
case 59:return 42;
break;
case 60:return 8;
break;
case 61:return 32;
break;
case 62:return 82;
break;
case 63:return 50;
break;
case 64: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 58; 
break;
case 65: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 57; 
break;
case 66:return 53;
break;
case 67:return 54;
break;
case 68:return 56;
break;
case 69:return 55;
break;
case 70:return 24;
break;
case 71:return 5;
break;
case 72: output.setOutput(`-->L칠xico, caracter: ${yy_.yytext} no pertenece al lenguaje (${yy_.yylloc.first_line}:${yy_.yylloc.first_column}).`); 
      errors.add(new Error("L칠xico", `Caracter: ${yy_.yytext} no pertenece al lenguaje.`, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:"((\\")|[^\"\n])*")/i,/^(?:'((\\\\)|(\\n)|(\\t)|(\\")|(\\')|[^\'\n])')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}